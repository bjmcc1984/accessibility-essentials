doctype html(lang='en')
head
	meta(charset='utf-8')
	title Modern Web A11y Workshop - SXSW Interactive 2015
	script(src='bower_components/webcomponentsjs/webcomponents.js')
	link(rel='import', href='bower_components/slide-deck/a-slide-deck.html')
	link(rel='import', href='bower_components/slide-deck/a-slide.html')
	link(rel='import', href='bower_components/slide-deck/code-block.html')
	link(rel='import', href='elements/flex-grid.html')
	link(rel='import', href='elements/flex-line.html')
	link(rel='stylesheet', href='css/theme.css')
body(is='a-slide-deck', unresolved='')
	a-slide.start
		h1 Modern Web A11y Workshop
		h3(style='margin-top:-.4em; font-weight:400') SXSW Interactive 2015
		p
			a(href='http://www.moderna11y.com') Patrick Fox
			a(href='https://twitter.com/patrickfox') @patrickfox
			a(href='https://twitter.com/razorfish') @razorfish
			a(href='https://twitter.com/search?q=%23moderna11y') #moderna11y
	a-slide(data-state="intro")
		h2 Introduction

	a-slide
		h3 What is this workshop about?
		ul
			li(part='') Modern accessibility challenges, solutions
			li(part='') Design and technical considerations
			li(part='') My perspective:
				ul
					li Web UI should be engaging and efficient for people of all abilities
					li Technical solutions should be elegant, robust
					li Code should be lean
					li Repeatability and consistency are key
					li Improve the way we talk about modern a11y
					li A11y must be a core part of every step of the process

	a-slide
		h3 Terminology
		flex-line
			div(flex='')
				ul
					li(part='') #[strong a11y] = accessibility
					li(part='') #[strong AT] = assistive technology
					li(part='') #[strong Screen reader] = software that interprets code and reads content
					li(part='') #[strong WAI-ARIA] = W3C technical spec, enables modern a11y
			div(flex='')
				ul
					li(part='') #[strong WCAG2] = W3C a11y guidelines, v2
					li(part='') #[strong Rehabilitation Act(1973), Section 508] = provides electronic a11y guidelines for US government vendors
					li(part='') #[strong Americans w/Disabilities Act (ADA, 1990)] = law, prohibits discrimiation
	a-slide
		h3 A11y is important
		ul
			li(part='') Companies: Legal and brand risks
			li(part='') People w/disabilities: Independence, dignity
			li(part='') A11y benefits everyone:
				ul
					li temporary disabilities, curb cuts, door openers
					li accessible web = machine-readable web = voice control is the future...
	a-slide
		h3 Compliance vs. Usability
		ul
			li(part='') "Standards compliant" is not good enough
			li(part='') Make experiences user-friendly for people of all abilities
			li(part='') "Create beautiful, elegant, accessible, innovative web experiences"
		div(part='') 
			p.bold "Accessibility is usability in context of disability"
			p - Jan Eric Hellbusch, #[a(href="http://bit.ly/accessibility-is-usability") bit.ly/accessibility-is-usability ]
		div(part='') 
			p.bold "Empathy encourages you to understand who uses your product, forces you ask deeper questions and motivates the many redesigns you go through to get a product right."
			p - Scott Jensen, #[a(href="http://bit.ly/a11y-empathy") http://bit.ly/a11y-empathy ]

	a-slide
		h3 Screen Readers
		flex-line
			div(flex='')
				ul
					li(part='') Speak document content
					li(part='') Provide navigation tools
						ul
							li Headings
							li Landmarks
							li Forms and form fields
							li Links, buttons
							li Element by element
			div(flex='')
				ul
					li(part='') Support for a11y features varies
					li(part='') Recommended Browser/Screen Reader Combos:
						ul
							li NVDA / Firefox (Windows)
							li JAWS / IE (Windows)
							li VoiceOver / Safari (MacOS/iOS)
							li TalkBack / Firefox (Android)
	a-slide
		h3 Screen Reader Stats
		flex-line
			div(flex='', part='')
				h4 Desktop
				ul
					li JAWS ~50%, mostly in US
					li NVDA ~20%, higher in EU
					li VoiceOver ~10%
			div(flex='', part='')
				h4 Mobile
				ul
					li JAWS
					li NVDA
					li VoiceOver
					li Talkback

	a-slide
		h3 Modern Web Challenges
		h4 What makes accessible, modern web UI so challenging?
		ul
			li(part='') Modern web UI is inherently inaccessible
				ul
					li(part='') Dynamic UI: content updates, state changes not communicated
					li(part='') Custom UI: role and purpose of non-native widgets
			li(part='') ARIA attributes help bridge this gap

	a-slide
		h3 Design/Development Tips
		flex-line
			div(flex='')
				ul
					li(part='') Create elegant, stable technical solutions
					li(part='') Minimize use of ARIA - rely on semantic code
					li(part='') Aim for widest screen reader/browser support possible
					li(part='') Test often - don't wait until the end
					li(part='') Developers and QA peeps should be screen reader experts
						//
							Ensure repeatability and consistency via libs
							Documentation
							Training
			div(flex='')
				ul
					li(part='') Make accessibility easier, repeatable
					li(part='') Build a11y into your process
					li(part='') Accessibility is a team effort
					//
						Collaboration is key
						True a11y is found at the intersection of sound technical solutions and informed user experience design
					li(part='') Be wary of "accessible" frameworks - test for yourself, BYO
					li(part='') Mimic native behaviors


	a-slide(data-state="intro")
		h2 Tools and Techniques

	a-slide
		h3 Focus Management
		h4 Managing where focus is and avoiding the loss of focus

		p Tips:
		ul
			li(part='') Focusing on an element reads its contents or label
			li(part='') Use carefully - don't move focus unless necessary
			li(part='') Only natively focusable or tabindexed elements can receive focus
			li(part='') Hard coding tabindex can be problematic --&gt; do not hard code tabindex
			li.strong(part='') Use a script to dynamically manage focus&hellip;

	a-slide(data-state="#access")
		h3 Focus on anything w/$.access()
		h4 
		div(part="")
			h4 How it works:
			ul
				li Adds #[code tabindex="-1"], places focus and cleans up on #[code focusout]
		div(part="")
			h4 Example Usage:
			ul
				li Focused item is no longer available
				li Modals
				li SPA view updates
			a(href='http://jsfiddle.net/pfox/bLkvuhap/show/light/', target="access") $.access() in action -&gt;

	a-slide
		h3 Announcing Content
		h4 Live regions automatically speak content updates
		p Use cases:
		ul
			li alerts
			li errors
			li notifications
			li any pertinent update	a-slide
	a-slide
		h3 Announcing Content
		h4 Implementation:
		code-block(language="html")
			| 
			| 		# aria-live={polite || assertive}
			|		<section aria-live="polite">...</section>
			| 
			| 		# log is shorthand for aria-live="polite"
			|		<section role="log">...</section>
			| 
			| 		# alert is shorthand for aria-live="assertive"
			|		<section role="alert"></section>
			| 
			| 		# status is shorthand for aria-live="polite"
			|		<section role="status"></section>
			| 
	a-slide(data-state="lotr")
		h3 One Live Region To Rule Them All
		div(part='')
			h4 Live region pitfalls:
			ul
				li Multiple live regions cumbersome to manage
				li Live region roles(status, alert, log) don't work reliably
				li Ad-hoc live region use adds complexity, risk
		div(part='')
			h4 Best practices:
			ul
				li Use only ONE live region in your entire site/app
				li Use a script to announce content&hellip;
	a-slide
		h3 Say Anything w/$.announce
		h4 How it works:
		ul
			li Create common @aria-live “announcer” element
			li Announcer needs to be in DOM on page load and left alone
			li Reset technique allows repeat announcements
		a(href="http://jsfiddle.net/pfox/ou11fr9p/show", target="_blank") Live Region Example -&gt;
		br
		a(href="http://bit.ly/a11y_kit", target="_blank") Accessibility Kit Library -&gt;

	a-slide
		h3 UI Isolation
		h4 Temporarily isolate user action/focus to specified area of UI
		h4 Usage:
		ul
			li(part='') Modals
			li(part='') In-page, multi-step process
	a-slide
		h3 Complex UI
		ul
			li(part='') What is overly complex for AT users is overly complex for everyone
			li(part='') Don't try to do too much in one view
			li(part='') Provide extra help where needed
	a-slide
		h3 Alternate Copy and Labeling
		h4 Additional copy used to improve accessibility
		p #[strong Examples:] button/link copy, form errors, visual translations
		p Labeled elements are interactive
		p Minimize use of alternate content
		p Space contraints or visual context may allow for shorter visible text


		h4 Uses:
		ul 
			li Summarizing complex copy

	a-slide
		h3 Alternate Copy and Labeling
		h4 Techniques:
		ul
			li #[code aria-label] -
			li #[code aria-labelledby] -
			li #[code aria-describedby] -
			li #[code .visuallyhidden] CSS technique - 
			li #[code title] - not reliable, don't use!
	a-slide
		h3 Alternate Copy and Labeling
		h4 Implementation:
		code-block(language='html')
			| 
			|		<button aria-label="Edit transaction">Edit</button>
			|          #label an element using another element's copy
			|		&lt;div aria-labelledby="some_id another_id third_id"> 
			|          #additional descriptive content
			|		&lt;input aria-describedby="visual_descriptive_text" type="text" /> 
			| 
			| 
			| 

		a(href='') aria-labelledby example -&gt;

	a-slide
		h3 Responsive Design Considerations
		h4 Common codebase === more testing, more complexity
		ul
			li(part='') Avoid overly complex UI changes
			li(part='') Touch gestures require accessible equivalent
			li(part='') Manage state and functionality changes w/JS - #[a(href='', target='hamburger') Hamburger Menu -&gt;]
			li(part='') Minimize swipes on mobile - simplify and use semantic markup
			li(part='') #[code aria-hidden="false"] breaks iOS VO
			li(part='') Test each break point&hellip;

	a-slide
		h3 CSS Pseudo Elements
		h4 Content via CSS (:before, :after)
		h4(part='') Tips:
		ul
			li(part='') Screen readers support and read content
			li(part='') Do not use with pertinent content
			li(part='') Great for icon fonts, but be careful...
				ul
					li Icon fonts rely on Unicode character mapping
					li MacOS VO used to read some Unicode characters as an audible beep
					li #[a(href='https://vimeo.com/120737667', target='_blank') Some Unicode characters map to emoji -&gt;]
	a-slide
		h3 CSS Pseudo Elements
		h4 Implementation:
		code-block(language="html")
			| 
			|          #works but with audible "beep" and "alien" sign in VO
			| 		<a href="..." class="icon external" target="_blank">External link</a>
			| 
			|          #better - use a span(aria-hidden=true)
			| 		<a href="..." class="icon external" target="_blank">
			|			<span aria-hidden="true"></span>
			|                   External link
			|		</a>
			| 
		code-block(language="css")
			| 
			| 		.icon.external span:after
			|			content: "\e622"
			|			aria-hidden: true &lt;-- wishful thinking :(
			| 

	a-slide(data-state="intro")
		h2 Implementing A11y


	a-slide
		h3 "Semantic" Markup
		h4 Semantic markup is the foundation of a11y, but...
		ul
			li(part='') Generic tags are sometimes better, less verbose
			li(part='') Most important: How is markup spoken?
			li(part='') Examples:
				ul
					li(part='') HTML5 sectioning elements spoken as landmarks
					li(part='') Buttons and anchors vs. generic elements
					li(part='') UL/LI for true list content ONLY
					li(part='') DL/DD/DT are overly verbose
	a-slide
		h3 Headings
		h4 Headings are crucial to page navigation and content hierarchy
		ul
			li(part='') UX team should determine heading strategy
			li(part='') Headings describe sections or groups of content
			li(part='') Order should not increase by more than 1
			li(part='') Don't overuse
			li(part='') Don't put links/buttons in headings
	a-slide(data-state='map')
		h3 Landmarks
		h4 Landmarks improve navigation and understanding of page structure
		table(part='')
			thead
				tr
					th Role
					th HTML Tag
					th Usage
					th Notes
			tbody
				tr.hl
					td banner
					td #[code &lt;header role="banner"&gt; ]
					td once per view
					td Page header
				tr.hl
					td main
					td #[code &lt;main role="main"&gt; ]
					td once per view
					td Main content area
				tr.hl
					td contentinfo
					td #[code &lt;footer role="contentinfo"&gt; ]
					td once per view
					td Page footer
				tr
					td search
					td -
					td multiple
					td Search form
				tr
					td form
					td -
					td multiple
					td Don't use unless a form plays a significant role in page
				tr
					td navigation
					td #[code &lt;nav role="navigation"&gt; ]
					td multiple
					td Use with label/heading
				tr
					td complementary
					td #[code &lt;aside role="complementary"&gt; ]
					td multiple
					td Use with label/heading
				tr
					td application
					td -
					td !avoid
					td
		//p(data-state='highlight-landmarks', part='')
	a-slide(data-state='map')
		h3 Landmark Usage
		h4 At a minimum, all pages should have:
		ul(part='')
			li banner  - #[code &lt;header role="banner"&gt; ]
			li main - #[code &lt;main role="main"&gt; ]
			li contentinfo - #[code &lt;footer role="contentinfo"&gt; ]
		p(part='') #[strong Goal:] ensure that all content resides in a landmark region and, in doing so, no content is orphaned 

	a-slide(data-state='map')
		h3 Landmark Tips
		h4 
		ul
			li(part='') Create a landmark strategy, use it consistently
			li(part='') Use labels for generic landmarks (e.g. navigation, complementary)
			li(part='') Some HTML5 sectioning elements are landmarks by default
			li(part='') Use HTML5 element <em>and</em> role
			li(part='') Don't overuse
		code-block(language="html")
			| 
			|          # examples
			|		<section role="complementary" aria-labelledby="module_heading">
			|			<h2 id="module_heading">Frequently Asked Questions</h2>
			|		</section>
			|		<header role="banner"></header>
			|		<footer role="contentinfo"></footer>
			|		<footer role="presentation"></footer>
			| 

	a-slide
		h3.jsmvc Single Page Architecture
		h4 Intial page load, subsequent dynamic view updates via Ajax
		p(part='') #[strong Problem:] No page refresh - screen reader unaware of view updates
		p(part='') #[strong Solution:] $.announce() status updates on view loaded
		div(part='')
			ul
				li Update page title from view to view
				li $.announce() "{new title} view loaded"
				li $.access() new content
			a(href="http://patrickfox.github.io/" target="_blank") Accessible Single-Page App -&gt;
	a-slide
		h3 Popup menus
		h4 Emulate native select menu states, behaviors and keyboard nav
		flex-line
			div(flex='', part='')
				h4 Button:
				ul
					li #[code aria-haspopup=true]
					li #[code aria-controls={id of menu}]
					li #[code aria-expanded={true|false}]
			div(flex='', part='') 
				h4 Menu:
				ul
					li keyboard navigation: up/down/tab moves through menu options
					li ESC closes menu, place focus back on button; use #[code role=“menuitem”] on items in menu
		a(href="http://patrickfox.github.io/blog/accessible-popup-menus.html" target="_blank") Popup Menu Example -&gt;
	a-slide
		h3 Accordion Content - TODO
		flex-line
			div(flex='')
				h4 Button:
				ul
					li aria-haspopup=true
					li aria-controls={id of menu}
					li aria-expanded={true|false}
			div(flex='') 
				h4 Container:
				ul
					li when collapsed, must be display:none to completely hide contents	a-slide
	a-slide
		h3 Dynamic Messages
		h4 Inline messages provide confirmation, informational or alert messaging
		flex-line
			div(flex='')
				h4 Button:
				ul
					li aria-haspopup=true
					li aria-controls={id of menu}
					li aria-expanded={true|false}
			div(flex='') 
				h4 Container:
				ul
					li when collapsed, must be display:none to completely hide contents
					li don't rely on #[code aria-hidden] alone
	a-slide
		h3 Modals
		h4 Example usage:
		ul
			li user-initiated prompt (e.g. confirmation of action)
			li system-initiated prompt (e.g. timeout warning)
	a-slide
		h3 Modals
		h4 Creating accessible modals
		flex-line
			div(flex='', part='')
				h4 Modal setup:
				ul
					li start heading order with H1
					li use #[code aria-labelledby] to label modal
					li add #[code role=dialog] to container
			div(flex='', part='')
				h4 On open:
				ul
					li focus on first focusable or dialog body
					li isolate modal UI from view content
					li dialog is announced
		div(part='')
			h4 On close:
			ul
				li return focus to button, last focused or main content
			a(href='http://patrickfox.github.io/#/blog/accessible-modals', target='modal_example') Modal example -&gt;
	a-slide
		h3 Modals
		h4 UI Isolation Detail
		code-block(language="html")
			| 
			| 		&lt;body>
			|		    <div data-isolate class="shell" aria-hidden="true">
			|              #all page content lives here
			|			</div>
			|              #modals live at body end
			|		    <section data-modal-id="test_modal" role="dialog">...</section>
			|		&lt;/body>
			| 
		p How it works:
		ul
			li(part='') main content lives in container
			li(part='') #[code aria-hidden] the page content
			li(part='') focus listener - page focus returns focus to modal
	a-slide
		h3 Tooltips
		h4 Tooltips contain succinct, non-interactive information
		h4 Example interactions:
		ul
			li form fields: display and read content on field interaction
			li button: display and read content on focus

	a-slide
		h3 Tooltips
		h4 Tooltip setup
		code-block(language="html")
			| 
			|          #button
			| 		<button type="button" role="tooltip" aria-labelledby="tooltip_21"></button>
			| 
			|          //container
			| 		<div id="tooltip_21">This is a tooltip</div>
			| 
		ul
			li on button focus/blur, tooltip opens/closes
			li tooltip contents are read upon button interaction
		a(href="" target="_blank") Tooltip demo -&gt;
	a-slide
		h3 Inline Form Validation
		p Inline, dynamic errors are problematic
		div(part='')
			h4 Tips:
			ul
				li Leverage field label to report error messaging
				li Use $.announce to speak errors
				li Use ARIA to communicate states:
					ul
						li @aria-invalid, @aria-required

			a(href="" target="_blank") Form validation demo -&gt;
	a-slide
		h3 


	a-slide(data-state="intro")
		h2 Testing a11y
	a-slide
		h3 Testing Tips
		ul
			li(part='') Test early, test often
			li(part='') Devs and testers should be *expert* screen reader users
			li(part='') Use VM’s, devices, and mobile emulators
			li(part='') Automate testing where possible
			li(part='') Use testing tools to cover basics(e.g. FireEyes), beware false positives
	a-slide
		h3 Testing Tools
		ul
			li(part='') FireEyes
			li(part='') Tenon
			li(part='') 
			li(part='') Automate testing where possible
			li(part='') Use testing tools to cover basics(e.g. FireEyes), beware false positives

	a-slide(data-state="intro")
		h2 Resources
	a-slide
		h3 Screen Reader Guides
		ul
			li(part='') JAWS Help: #[a(href='http://bit.ly/JAWS_Keystrokes', target='at_help') bit.ly/JAWS_Keystrokes]
			li(part='') NVDA Help: #[a(href='http://bit.ly/NVDA_Help', target='at_help') bit.ly/NVDA_Help]
			li(part='') VoiceOver Help: #[a(href='http://bit.ly/VO_Help', target='at_help') bit.ly/VO_Help]
		
	a-slide(data-state="intro")
		h2 Summary

		ul
			li $.announce and $.access your modern UI w/a11y_kit - bit.ly/a11y_kit
			li Examples - moderna11y.com
			li
			li
			li
	a-slide(data-state="intro")
		h2 Questions, Comments?
	a-slide(data-state="intro")
		h2 Thanks!


	footer(role="contentinfo")
		span 
			a(href="/") Home



